# Trigger la pipeline cuando haya cambios en la rama 'main'
trigger:
- main

# Define el agente donde se ejecutarán las tareas
pool:
  vmImage: 'ubuntu-latest' # Agente de Linux, bueno para .NET Core

# Variables que podemos usar en la pipeline
variables:
  buildConfiguration: 'Release' # Compilaremos en modo Release
  projectPath: 'MiWebAppKarlasStuffs/'

  # VARIABLES PARA EL DESPLIEGUE (CONFIRMADAS)
  azureSubscription: 'AzureServiceConnectionForKarlaWebApp'
  webAppName: 'karlaislearning'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Publish'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8.x SDK'
      inputs:
        version: '8.x' # Asegúrate de que coincida con la versión de tu proyecto

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Restore'
      inputs:
        command: 'restore'
        projects: '$(projectPath)MiWebAppKarlasStuffs.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Build'
      inputs:
        command: 'build'
        projects: '$(projectPath)MiWebAppKarlasStuffs.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Publish'
      inputs:
        command: 'publish'
        projects: '$(projectPath)MiWebAppKarlasStuffs.csproj'
        publishWebProjects: false
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Build Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App'
    environment: 'karlastuffs-env'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: '$(webAppName)'
              package: '$(System.ArtifactsDirectory)/drop/*.zip'
